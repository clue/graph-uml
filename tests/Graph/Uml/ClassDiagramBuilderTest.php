<?php

class ClassDiagramBuilderTest extends TestCase
{
    private $graph;
    private $builder;

    public function setup()
    {
        $this->graph = new Fhaculty\Graph\Graph();
        $this->builder = new Fhaculty\Graph\Uml\ClassDiagramBuilder($this->graph);
    }

    public function testParentChildSuccess()
    {
        $this->builder->createVertexClass('Fhaculty\Graph\Edge\Base');
        $this->builder->createVertexClass('Fhaculty\Graph\Edge\Directed');
    }

    /**
     * Test to show failing code
     *
     * Adding a sub-class (Edge\Directed) also automatically adds its parent (Edge\Base).
     * So trying to add the parent (Edge\Base) again fails because of a duplicate class name.
     *
     * @expectedException RuntimeException
     */
    public function testChildParentFail()
    {
        $this->builder->createVertexClass('Fhaculty\Graph\Edge\Directed');
        $this->builder->createVertexClass('Fhaculty\Graph\Edge\Base');
    }

    /**
     * Building a Class Diagram it is of no use to show all relations.
     *
     * Say we have
     *
     * @code
     * interface A { }
     * interface B extends A { }
     * class C implements B { }
     * @endcode
     *
     * Then there is an implied direct relation between A and C but the layout
     * is cluttered by this link.
     */
    public function testRemoveTransitiveDependencies()
    {
        $a = 'Fhaculty\Graph\Edge\Base';
        $b = 'Fhaculty\Graph\Edge\Directed';

        $this->builder->createVertexClass($a);
        $this->builder->createVertexClass($b);

        $this->assertNotNull($this->graph->getVertex($a), "Found vertex $a");
        $this->assertNotNull($this->graph->getVertex($b), "Found vertex $b");

        $c = 'Fhaculty\Graph\Set\VerticesAggregate';
        $this->assertNotNull($this->graph->getVertex($c), "Found autogenerated vertex $c");

        // Test for the non existance of a edge from $b to $c
        $vertex_b = $this->graph->getVertex($b);
        $vertex_c = $this->graph->getVertex($c);
//        var_dump($vertex_c);
        $connectionsTo = $vertex_b->getVerticesEdgeTo();
//        var_dump($connectionsTo);

        $this->assertFalse($connectionsTo->hasVertexId($vertex_c), "Direct link from $b to $c");

    }
}
